"""
Loads the pickle generated by example_contextual2.py and generates nice plots.
"""

import pickle
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

# data: [experiments...]
# experiments: (obj_name, opsign, opname, kernel1name, kernel2name, regret_retries, contextual_regret_retries)
# regret_retries: np.array (shape: num_iterations, num_retries)
# contextual_regret_retries: np.array (shape: num_iterations, num_retries)
with open("example_contextual2.pkl", "rb") as f:
    data = pickle.load(f)


objectives = [('bran', 'product of two Branin function', (0, 20000)),
              ('hart', 'Hartmann 6 function', (0, 4))]

num_iterations = 32
num_retries = 4

for obj_id, obj_name, y_limits in objectives:
    f1, axes = plt.subplots(6, 3, sharex=True, sharey=True, figsize=(17.5, 22.5))
    axes = [ax for axi in axes for ax in axi]

    for obj_id_chk, opsign, opname, kernel1name, kernel2name, regret_retries, contextual_regret_retries in data:
        if obj_id_chk != obj_name:
            continue
        ax = axes.pop(0)
        # Plot data
        ax.set_xlabel('iterations')
        ax.set_ylabel('contextual regret')
        ax.set_title('Context kernel %s %s\nAction kernel %s' % (kernel1name, opsign, kernel2name))
        regret_mean = np.mean(regret_retries, axis=1)
        regret_std = np.std(regret_retries, axis=1)
        contextual_regret_mean = np.mean(contextual_regret_retries, axis=1)
        contextual_regret_std = np.std(contextual_regret_retries, axis=1)
        #plt1 = ax.bar(np.arange(1, 1+num_iterations), regret_mean, 0.33, color='r', yerr=regret_std, label='Regret')
        #plt2 = ax.bar(np.arange(1, 1+num_iterations) + 0.33, contextual_regret_mean, 0.33, color='b', yerr=contextual_regret_std, label='Contextual Regret')
        #plt1 = ax.boxplot(regret_retries.transpose(), widths=0.25)
        plt2 = ax.boxplot(contextual_regret_retries.transpose(), showmeans=True)
        #ax.get_xaxis().set_major_locator(matplotlib.ticker.MaxNLocator(integer=True))
        #ax.set_yscale("log", nonposy='clip')
        ax.set_ylim(ymin=y_limits[0], ymax=y_limits[1])
        ax.set_xlim(xmin=0, xmax=num_iterations+1)
        ax.set_xticks([1] + list(range(4, num_iterations+1, 4)))
        ax.set_xticklabels([1] + list(range(4, num_iterations+1, 4)))
        #ax.legend(handles=[plt1, plt2])
        print "Last mean of %s (%s %s %s): %f" %(obj_id_chk, kernel1name, opname, kernel2name, contextual_regret_mean[len(contextual_regret_mean) - 1])
    f1.tight_layout()
    f1.savefig('%s.svg' % obj_id)

plt.show(block=True)